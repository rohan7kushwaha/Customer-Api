// Source code is unavailable, and was generated by the Fernflower decompiler.
package com.zensar.student.service.impl;


import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import com.zensar.student.entity.MenuEntity;
import com.zensar.student.repository.FoodItemRepo;
import org.modelmapper.ModelMapper;
import org.modelmapper.TypeMap;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.zensar.student.dto.CustomerOrder;
import com.zensar.student.dto.FoodItem;
import com.zensar.student.entity.CustomerOrderEntity;
import com.zensar.student.entity.FoodItemEntity;
import com.zensar.student.exception.InvalidCustomerOrderIdException;
import com.zensar.student.repository.CustomerOrderRepo;
import com.zensar.student.repository.MenuRepo;
import com.zensar.student.service.CustomerOrderService;

@Service
public class CustomerOrderServiceImpl implements CustomerOrderService {
    @Autowired
    private MenuRepo menuRepo;
    @Autowired
    private CustomerOrderRepo customerOrderRepo;
    @Autowired
    FoodItemRepo foodItemRepo;
    @Autowired
    ModelMapper modelMapper;

    public CustomerOrder createCustomerOrder(CustomerOrder customerOrder) {
        CustomerOrderEntity orderEntity = new CustomerOrderEntity();
        orderEntity.setCustomerName(customerOrder.getCustomerName());
        orderEntity.setId(customerOrder.getId());
        List<FoodItem> foodItemsDTO = customerOrder.getFoodItems();
        List<FoodItemEntity> foodItemEntities = new ArrayList<>();

        for (FoodItem foodItemDTO : foodItemsDTO) {
            FoodItemEntity foodItemEntity = new FoodItemEntity();
            foodItemEntity.setId(foodItemDTO.getId());
            foodItemEntity.setMenuId(foodItemDTO.getMenuId());
            foodItemEntity.setQuantity(foodItemDTO.getQuantity());

            foodItemEntity.setCustomerOrder(orderEntity);
            foodItemEntities.add(foodItemEntity);

        }
        orderEntity.setFoodItems(foodItemEntities);
        // Save the order and associated food items
        CustomerOrderEntity save = customerOrderRepo.save(orderEntity);

        return customerOrder;
    }

    @Override
    public CustomerOrder getCustomerOrderById(int orderId) {
        Optional<CustomerOrderEntity> optEntity = this.customerOrderRepo.findById(orderId);
        if (optEntity.isPresent()) {
            CustomerOrderEntity entity = optEntity.get();
            CustomerOrder order;
            order = this.convertOrderEntityToOrderDTO(entity);
            return order;
        } else {
            throw new InvalidCustomerOrderIdException("" + orderId);
        }
    }

    private CustomerOrder convertOrderEntityToOrderDTO(CustomerOrderEntity entity) {
        TypeMap<CustomerOrderEntity, CustomerOrder> typeMap = this.modelMapper.typeMap(CustomerOrderEntity.class, CustomerOrder.class);
        typeMap.addMappings((mapper) -> {
            mapper.map(CustomerOrderEntity::getId, CustomerOrder::setId);
            mapper.map(CustomerOrderEntity::getCustomerName, CustomerOrder::setCustomerName);
            mapper.map(CustomerOrderEntity::getFoodItems, CustomerOrder::setFoodItems);
        });
        return (CustomerOrder) this.modelMapper.map(entity, CustomerOrder.class);
    }


    private CustomerOrderEntity convertOrderDtoToOrderEntity(CustomerOrder dto) {
        TypeMap<CustomerOrder, CustomerOrderEntity> typeMap = this.modelMapper.typeMap(CustomerOrder.class, CustomerOrderEntity.class);
        typeMap.addMappings((mapper) -> {
            mapper.map(CustomerOrder::getId, CustomerOrderEntity::setId);
            mapper.map(CustomerOrder::getCustomerName, CustomerOrderEntity::setCustomerName);
            mapper.map(CustomerOrder::getFoodItems, CustomerOrderEntity::setFoodItems);
        });
        return (CustomerOrderEntity) this.modelMapper.map(dto, CustomerOrderEntity.class);
    }
}




